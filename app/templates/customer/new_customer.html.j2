{% extends 'base.html.j2' %}
{% from "macros.html.j2" import render_field %}


{% block content %}

<div class="container d-flex justify-content-center align-items-center mt-5">
    <div class="row">
        <div class="card shadow ">
            <div class="card-header text-center">
                <h5>Add New Customer</h5>
            </div>
            <div class="card-body">
                <form action="" method="POST" class="needs-validation" novalidate>
                    {{ form.hidden_tag() }}

                    <div class="mb-3">
                        {{ render_field(form.name)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.street)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.city)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.state)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.zip)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.phone_number, maxlength="13")}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.email)}}
                    </div>

                    <div class="d-grid gap-2 mb-3">
                        {{ form.submit(class="btn btn-primary") }}    
                    </div>

                    <div class="d-grid gap-2 mb-3">
                        <a href="{{ url_for('customer.index') }}" class="btn btn-primary">Cancel</a>
                    </div> 

                </form>
            </div>
        </div>
    </div>
</div>


<script>

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Bootstrap JavaScript styling for disabling form submissions if there are invalid fields.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    (() => {
    'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to.
        const forms = document.querySelectorAll('.needs-validation')

        // Loop over forms, call validate functions, and prevent submission if needed.
        Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
                phoneNumberValidate();
                emailValidate();

                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
            }, false)
        })
    })()


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Format phone number as user types: (XXX)XXX-XXXX
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    $( "#phone_number" ).on( "keyup change", function( event ) {

        // '/\D/' Matches any character that is not a digit.
        // 'g' global match modifier. Finds all matches not just the first.
        var num = $(this).val().replace(/\D/g,''); 

        // Do nothing if backspace key is pressed.
        if ( event.which != 8) {
            $(this).val('(' + num.substring(0,3) + ')' + num.substring(3,6) + '-' + num.substring(6,10));
        }
    });


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Make sure length of phone number is 13 characters.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    function phoneNumberValidate() {
        const phone_num = document.getElementById('phone_number');
        const isValid = phone_num.textLength === 13;

        if(!isValid) {
            phone_num.setCustomValidity('Invalid');
            phone_num.nextElementSibling.textContent = 'Phone Number is too short.'
        }
        else {
            phone_num.setCustomValidity('');
        }
        return isValid;
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Make sure the entered email address is a vaild email format
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    function emailValidate() {
        const email = document.getElementById('email');
        const emailRegExp =
        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

        const isValid = email.value.length === 0 || emailRegExp.test(email.value);

        if(!isValid) {
            email.setCustomValidity('Invalid');
            email.nextElementSibling.textContent = 'Not a valid email format'
        }
        else {
            email.setCustomValidity('');
        }
        return isValid;
    }

</script>

{% endblock %}
