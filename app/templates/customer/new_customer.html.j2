{% extends 'base.html.j2' %}
{% from "macros.html.j2" import render_field %}


{% block content %}


<div class="container d-flex justify-content-center align-items-center mt-5">
    <div class="row">
        <div class="card shadow ">
            <div class="card-header text-center">
                <h5>Add New Customer</h5>
            </div>
            <div class="card-body">
                <form action="" method="POST" class="needs-validation" novalidate>
                    {{ form.hidden_tag() }}

                    <div class="mb-3">
                        {{ render_field(form.name)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.street)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.city)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.state)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.zip)}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.phone_number, maxlength="13")}}
                    </div>

                    <div class="mb-3">
                        {{ render_field(form.email)}}
                    </div>

                    <div class="d-grid gap-2 mb-3">
                        {{ form.submit(class="btn btn-primary") }}    
                    </div>

                    <div class="d-grid gap-2 mb-3">
                        <a href="{{ url_for('customer.index') }}" class="btn btn-primary">Cancel</a>
                    </div> 

                </form>
            </div>
        </div>
    </div>
</div>


<script>


    // Bootstrap JavaScript styling for disabling form submissions if there are invalid fields
    (() => {
    'use strict'

    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    const forms = document.querySelectorAll('.needs-validation')

    // Loop over them and prevent submission
    Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
        if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
        }

        form.classList.add('was-validated')
        }, false)
    })
    })()


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Format phone number as user types. (XXX)XXX-XXXX
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    $( "#phone_number" ).on( "keyup change", function( event ) {

        // '/\D/' Matches any character that is not a digit.
        // 'g' global match modifier. Finds all matches not just the first.
        var num = $(this).val().replace(/\D/g,''); 

        // Do nothing if backspace key is pressed.
        if ( event.which != 8) {
            $(this).val('(' + num.substring(0,3) + ')' + num.substring(3,6) + '-' + num.substring(6,10));
        }
    });


</script>


{% endblock %}
