{% extends 'base.html.j2' %}
{% from "macros.html.j2" import render_pagination %}


{% block content %}

{# Display grid wrapper #}
<div class="wrapper">


{# Page title #}
<div class="search-page-title">
    <div class="container text-center mb-5 mt-5">
        <span class="title"><h1>{% block title %} Search Customers {% endblock %}</h1></span>
    </div> 
</div>


{# New customer button. Activates modal #}
<div class="new-customer-button">
    <button type="button" class="btn btn-primary" data-route="{{ url_for('customer.add_customer')}}" 
        id="newCustomerBtn" data-bs-target="#Modal">New Customer
    </button>
</div> 


{# Modal for new customer #}
<div class="modal fade" id="Modal" tabindex="-1" role="dialog" aria-labelledby="FormModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
         <!-- Script loads modal content here -->
        </div>
    </div>
</div>


{# Search bar and button #}
<div class="search-input-field">
    <form action="{{ url_for('customer.search', search_tag='search_tag') }}" method="POST" class="row mb-3" novalidate>
    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
    <div class="col-sm-4 mb-3">
        <div class="input-group">
        <input type="text" class="form-control" name="search_tag" id="search_tag" placeholder="Search By Name">
        </div>
    </div>

    <div class="col-sm-2 mb-3">
        <button type="submit" class="btn btn-primary">Search</button>
    </div>

        <div class="col-sm-4 mb-3">
            <a href="{{ url_for('customer.index')}}">
                <button type="button" class="btn btn-primary">Reset Search</button>
            </a>
        </div>
    </form> 
</div>


{# Customer results table #}
<div class="customer-search-table">
    <table class="table table-striped table-hover table-bordered">
        <thead>
            <tr class="text-center">
                <th>ID</th>
                <th>Name</th>
                <th>Street</th>
                <th>City</th>
                <th>State</th>
                <th>Zip</th>
                <th>View</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            {% for customer in customers.items %}
                <tr class="text-center align-middle">
                    <td>{{ customer.id }}</td>
                    <td>{{ customer.name }}</td>
                    <td>{{ customer.addresses[0].street }}</td>
                    <td>{{ customer.addresses[0].city }}</td>
                    <td>{{ customer.addresses[0].state }}</td>
                    <td>{{ customer.addresses[0].zip }}</td>
                    <td><a href="{{ url_for('customer.detail', Id=customer.id)}}"><button type="button" class="btn btn-primary">View</button></a></td>
                    <td><form method="POST" action="{{ url_for('customer.delete_customer', Id=customer.id) }}">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                        <input type="submit" value="Delete" onclick="return confirm('Are you sure you want to delete this customer?')"></form>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</div>


{# PAGINATION MACRO #}
<div class="pagination-table">
    <ul class="pagination justify-content-center">
        {# Endpoint passed in from route. Either, 'customer.index' or 'customer.search'. #}
        {{ render_pagination(customers, endpoint )}}
    </ul>
</div>

</div> {# End of display grid wrapper #}


<script>

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Bootstrap JavaScript styling for disabling form submissions if there are invalid fields.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    (validateForm = () => {
    'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to.
        const forms = document.querySelectorAll('.needs-validation')
        let formValid = true;

        // Loop over forms, call validate functions, and prevent submission if needed.
        Array.from(forms).forEach(form => {
            phoneNumberValidate();
            emailValidate();

            if(!form.checkValidity()) {
                event.preventDefault()
                event.stopPropagation()
                formValid = false;
            }
            form.classList.add('was-validated')
        })
        return formValid;
    })


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Load new customer form in a modal
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    $('#newCustomerBtn').on("click", function () {
        // Route specified in button attribute "data-route".
        const url = $(this).data('route');

        $.get(url, function (data) {
            $('#Modal .modal-content').html(data);
            $('#Modal').modal('toggle');

            $('#customer_form_button').on("click", function (event) {
                event.preventDefault();
                let isValid = validateForm();

                if(isValid == true) {
                    $.post(url, data = $('#ModalForm').serialize(), function (data) {
                        if(data.status == '200 OK') {
                            $('#Modal').modal('hide');
                            location.reload()};
                    })
                }
            });
        })
    });

</script>

{% endblock %}
