{% from "macros.html.j2" import render_field %}


{% block content %}

<div class="container text-center mb-5 mt-5">
    <span class="title"><h1>{% block title %} Summary {% endblock %}</h1></span>
</div>


<form action="" method="POST" class="needs-validation" id="editCustomerForm" novalidate>
    <div class="row mt-5">
    <div class="col-sm-6 mb-3 mb-sm-0">
        <div class="card">
            <div class="card-header text-center">
                <h5><b>Name & Address</b></h5>
            </div>
        <div class="card-body">
            <ul class="list-group list-group-flush">
                <li class="list-group-item">{{ render_field(form.name, disabled="true")}}</li>
                <li class="list-group-item">{{ render_field(form.street, disabled="true")}}</li>
                <li class="list-group-item">{{ render_field(form.city, disabled="true")}}</li>
                <li class="list-group-item">{{ render_field(form.state, disabled="true")}}</li>
                <li class="list-group-item">{{ render_field(form.zip, disabled="true")}}</li>
            </ul>
        </div>
        </div>
    </div>
    {# Second card #}
    <div class="col-sm-6">
        <div class="card">
            <div class="card-header text-center">
                <h5><b>Contact</b></h5>
            </div>
        <div class="card-body">
            <ul class="list-group list-group-flush">
                <li class="list-group-item">{{ render_field(form.phone_number, maxlength="13", disabled="true")}}</li>
                <li class="list-group-item">{{ render_field(form.email, disabled="true")}}</li>
            </ul>
        </div>
        </div>
    </div>
    {# End Row #}
    </div>

    <div class="container text-center mt-5">
        <button type="button" class="btn btn-primary" id="editButton" data-edit="{{ url_for('customer.edit', Id=customer.id)}}">Edit</button>
        <button type="button" class="btn btn-primary" id="closeButton">Close</button>
    </div>
</form>


<script>

   ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Bootstrap JavaScript styling for disabling form submissions if there are invalid fields.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    (validateForm = () => {
    'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to.
        const forms = document.querySelectorAll('.needs-validation')
        let formValid = true;

        // Loop over forms, call validate functions, and prevent submission if needed.
        Array.from(forms).forEach(form => {
            phoneNumberValidate();
            emailValidate();

            if(!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                formValid = false;
            };
            form.classList.add('was-validated');
        });
        return formValid;
    });


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Format phone number when input field is pre-filled with data: (XXX)XXX-XXXX
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    (function () {
        phone_num = document.getElementById('phone_number').value;
        phone_num_formatted = phone_num.replace(/(\d{3})(\d{3})(\d{4})/, '($1)$2-$3');
        document.getElementById('phone_number').value = phone_num_formatted;
    })();


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Make sure length of phone number is 13 characters.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    function phoneNumberValidate() {
        const phone_num = document.getElementById('phone_number');
        const isValid = phone_num.value.length === 13;

        if(!isValid) {
            phone_num.setCustomValidity('Invalid');
            phone_num.nextElementSibling.textContent = 'Phone Number is too short.';
        } else {
            phone_num.setCustomValidity('');
        };

        return isValid;
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Make sure the entered email address is a vaild email format
    // emailRegExp source: https://www.w3resource.com/javascript/form/email-validation.php
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    function emailValidate() {
        const email = document.getElementById('email');

        const emailRegExp =
        /^\w+([\.-\\+]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;

        const isValid = email.value.length === 0 || emailRegExp.test(email.value);

        if(!isValid) {
            email.setCustomValidity('Invalid');
            email.nextElementSibling.textContent = 'Not a valid email format';
        } else {
            email.setCustomValidity('');
        };

        return isValid;
    }

    $( '#email' ).on( 'keyup change', function(event) {
        emailValidate();
    });


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Format phone number as user types: (XXX)XXX-XXXX
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    $( '#phone_number' ).on( 'keyup', function(event) {

        // '/\D/' Matches any character that is not a digit.
        // 'g' global match modifier. Finds all matches not just the first.
        var num = $(this).val().replace(/\D/g,''); 

        // Do nothing if backspace key, left and right arrow keys are pressed.
        if(event.which != 8 && event.which != 37 && event.which != 39) {
            $(this).val('(' + num.substring(0,3) + ')' + num.substring(3,6) + '-' + num.substring(6,10));
        };

        phoneNumberValidate();
    });


    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Edit button and close button
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    let inputs = document.getElementsByTagName('input');
    let selects = document.getElementsByTagName('select');

    let inputsArray = Array.from(inputs);
    let selectsArray = Array.from(selects);
    let fields = inputsArray.concat(selectsArray);

    let cancelButton = document.getElementById('closeButton');
    let saveButton = document.getElementById('editButton');

    const url = $('#editButton').data('edit');

    $('#editButton').on('click', function(event) {
        event.stopPropagation();

        $('#editButton').addClass('saveButton');
        $('#closeButton').addClass('cancelButton');
        $('#state').addClass('form-select');
        
        cancelButton.textContent = 'Cancel';
        saveButton.textContent = 'Save';

        for (const field of fields) {
            field.disabled = false;
        }

        $('#editButton').off('click');
    });


    $('#closeButton').on('click', function() {
        if($('#closeButton').hasClass('cancelButton')) {
            location.reload();
            for (const field of fields) {
                field.disabled = true;
            }
        } else {
            location.replace(document.referrer);
        };
    });


    $(document).on('click', '.saveButton', function(event) {
        event.preventDefault();
        let isValid = validateForm();

        if(isValid == true) {
            $.post(url, data = $('#editCustomerForm').serialize(), function (data) {
                if(data.status == '200 OK') {
                    location.reload();
                    for (const field of fields) {
                        field.disabled = true;
                    }
                };
            });
        };
    });

</script>

{% endblock %}
